var documenterSearchIndex = {"docs":
[{"location":"spline/#Cubic-Spline","page":"Cubic Spline","title":"Cubic Spline","text":"","category":"section"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"We consider here a cubic spline passing through the points (x_iy_i) with a=x_1ldotsx_n=b, that is, a class function mathcal C^2 on a b and each restriction at the interval x_i-1x_i, 1leq ileq n, is a polynomial of degree less than 3. We will note S such a spline. His equation is given by","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"    S_i(x) =  Ay_i + By_i+1 + Cy_i+ D y_i+1 qquad x_ileq xleq x_i+1","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"where","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"    A = fracx_i+1-xx_i+1 - x_i qquad textet qquad B = fracx-x_ix_i+1 - x_i","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"    C = frac16left(A^3-Aright)left(x_i+1-x_iright)^2 qquad textet qquad D = frac16left(B^3-Bright)left(x_i+1-x_iright)^2","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"If we derive this equation twice with respect to :math:x, we get","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"    fracd^2S(x)d x = Ay_i + By_i+1","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"Since A = 1 in x_i and A = 0 in x_ i + 1 and conversely for B, we can see that the second derivative is continuous at the interface of the two intervals x_i-1 x_i and x_i x_i + 1.","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"It remains to determine the expression of y_i. To do this, we will calculate the first derivative and impose that it is continuous at the interface of two intervals. The first derivative is given by","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"    fracdydx=fracy_i+1-y_ix_i+1-x_i-frac3A^2-16(x_i+1-x_i)y_i+frac3B^2-16(x_i+1-x_i)y_i+1","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"We therefore want the value of the first derivative in x = x_i over the interval x_i-1 x_i to be equal to the value of the first derivative in x = x_i over the interval x_i x_i + 1; which gives us for i = 2 dots n-1","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"    a_iy_i-1+b_iy_i+c_iy_i+1=d_i","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"with","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"    beginarrayl\n    a_i = fracx_i-x_i-1x_i+1-x_i-1\n    b_i = 2\n    c_i = fracx_i+1-x_ix_i+1-x_i-1\n    d_i = frac6x_i+1-x_i-1left(fracy_i+1-y_ix_i+1-x_i-fracy_i-y_i-1x_i-x_i-1right)\n    endarray","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"So we have n-2 linear equations to calculate the n unknowns y_i for i = 1 dots n. So we have to make a choice for the first and last values and we will take them equal to zero. We can recognize the resolution of a system with a tridiagonal matrix. It is then easy to solve it by using the algorithm of Thomas which one recalls the principle","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"    c_i=left\n    beginarraylr\n    fraccib_ii=1\n    fracc_ib_i-a_ic_i-1i=2dotsn\n    endarray\n    right","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"    d_i=left\n    beginarraylr\n    fracdib_ii=1\n    fracd_i-a_id_i-1b_i-a_ic_i-1i=2dotsn\n    endarray\n    right","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"The solution is then obtained by the formula","category":"page"},{"location":"spline/","page":"Cubic Spline","title":"Cubic Spline","text":"    beginarrayl\n    y_n = d_n \n    y_i = d_i-c_iy_i+1 qquad textfor qquad i=n-1dots1\n    endarray","category":"page"},{"location":"CHANGELOG/","page":"Changelog","title":"Changelog","text":"EditURL = \"https://github.com/pnavaro/Splinart.jl/blob/master/CHANGELOG.md\"","category":"page"},{"location":"CHANGELOG/","page":"Changelog","title":"Changelog","text":"Write first Julia version of splinart package commit 59667e6a42db6f0976d7b474aa6998d1fa198ccb","category":"page"},{"location":"api/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"api/","page":"Functions","title":"Functions","text":"Modules = [Splinart]\nOrder   = [:function]","category":"page"},{"location":"api/#Splinart.circle-Tuple{Any, Any}","page":"Functions","title":"Splinart.circle","text":"circle(center, radius; npoints)\n\n\nDiscretization of a circle.\n\nParameters\n\ncenter : 2d coordinates of the center.\nradius : Radius of the circle.\nnpoints : Number of discretization points (the default value is 50).\n\nReturns\n\nThe theta angle.\nThe 2d coordinates of the circle.\n\n\n\n\n\n","category":"method"},{"location":"api/#Splinart.draw_pixel!-Tuple{Any, Any, Any}","page":"Functions","title":"Splinart.draw_pixel!","text":"draw_pixel!(img, xs, ys)\n\n\nAdd pixels on the image.\n\nParameters\n\nimg : The image where we add pixels.\nxs : The x coordinate of the pixels to add.\nys : The y coordinate of the pixels to add.\n\n\n\n\n\n","category":"method"},{"location":"api/#Splinart.line-Tuple{Any, Any}","page":"Functions","title":"Splinart.line","text":"line(b, e; ypos, npoints)\n\n\nDiscretization of a horizontal line.\n\nParameters\n\nbegin : The left point of the line.\nend : The right point of the line.\nypos : The position of the y coordinate (the default value is 0.5).\nnpoints : Number of discretization points (the default value is 50).\n\nReturns\n\nThe 2d coordinates of the line.\n\n\n\n\n\n","category":"method"},{"location":"api/#Splinart.save_img-Tuple{Any, Any, Any}","page":"Functions","title":"Splinart.save_img","text":"save_img(img, path, filename)\n\n\nSave the image in a png file.\n\nParameters\n\nimg : The image to save.\npath : The save directory.\nfilename : The file name with the png extension.\n\n\n\n\n\n","category":"method"},{"location":"api/#Splinart.show_img-Tuple{Any}","page":"Functions","title":"Splinart.show_img","text":"show_img(img)\n\n\nPlot the image using matplotlib.\n\nParameters\n\nimg : The image to save.\n\n\n\n\n\n","category":"method"},{"location":"api/#Splinart.spline-Tuple{Any, AbstractVector}","page":"Functions","title":"Splinart.spline","text":"spline(xs, ys)\n\n\nReturn the second derivative of a cubic spline.\n\nParameters\n\nxs : The x coordinate of the cubic spline.\nys : The y coordinate of the cubic spline.\n\nReturns\n\nThe second derivative of the cubic spline.\n\n\n\n\n\n","category":"method"},{"location":"api/#Splinart.splint!-NTuple{5, Any}","page":"Functions","title":"Splinart.splint!","text":"splint!(y, xs, ys, y2s, x)\n\n\nEvaluate a sample on a cubic pline.\n\nParameters\n\nxs : The x coordinates of the cubic spline.\nys : The y coordinates of the cubic spline.\ny2s : The second derivative of the cubic spline.\nx : The sample where to evaluation the cubic spline.\ny : The y coordinates of the sample.\n\nSee Also\n\nSplinart.spline\n\n\n\n\n\n","category":"method"},{"location":"api/#Splinart.update_img!-NTuple{4, Any}","page":"Functions","title":"Splinart.update_img!","text":"update_img!(\n    img,\n    path,\n    xs_func,\n    x;\n    nrep,\n    scale_value,\n    periodic\n)\n\n\nUpdate the image using a cubic spline on a shape.\n\nParameters\n\nimg : The output image.\npath : The y coordinate of the cubic spline if x is not None,   the coordinates of the cubic spline if x is None.\nx : The x coordinates of the cubic spline if given.   (the default value is None)\nxs_func : The function that return the x coordinate of the sampling points   where to compute the y coordinates given the spline equation.\nnrep : Number of iteration (default is 300).\nperiodic : Define if the first and last points of the path must be equal   (default is true).\nscale_value : Rescale the random radius (default value is 0.00001).\n\nSee Also\n\nupdate_path!\n\n\n\n\n\n","category":"method"},{"location":"api/#Splinart.update_path!-Tuple{Any}","page":"Functions","title":"Splinart.update_path!","text":"update_path!(path; scale_value, periodic)\n\n\nUpdate the path of the spline.\n\nWe move each point of the path by a random vector defined inside a circle where\n\nthe center is the point of the path\nthe radius is a random number between [-1, 1]\n\nParameters\n\npath : The y coordinate of the cubic spline.\nperiodic : If true, the first and the last points of the   path are the same (the default value is false).\nscale_value : Rescale the random radius (default value is 0.00001).\n\n\n\n\n\n","category":"method"},{"location":"#Welcome-to-Splinart.jl-documentation!","page":"Splinart.jl","title":"Welcome to Splinart.jl documentation!","text":"","category":"section"},{"location":"","page":"Splinart.jl","title":"Splinart.jl","text":"Splinart.jl is a package used for a tutorial which explains how to do the Julia packaging and automate the process to distribute this package using github.","category":"page"},{"location":"","page":"Splinart.jl","title":"Splinart.jl","text":"This is a translation in Julia language of the Python package splinart.","category":"page"},{"location":"","page":"Splinart.jl","title":"Splinart.jl","text":"A C++ version is also available. It uses software manager pixi for deployment.","category":"page"},{"location":"","page":"Splinart.jl","title":"Splinart.jl","text":"The original idea of splinart is found on the great invonvergent website.","category":"page"},{"location":"","page":"Splinart.jl","title":"Splinart.jl","text":"If you want to install Splinart::","category":"page"},{"location":"","page":"Splinart.jl","title":"Splinart.jl","text":"import Pkg\nPkg.add(\"https://github.com/pnavaro/Splinart.jl\")","category":"page"},{"location":"","page":"Splinart.jl","title":"Splinart.jl","text":"","category":"page"},{"location":"circle/#Splinart-on-a-circle","page":"Splinart on a circle","title":"Splinart on a circle","text":"","category":"section"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"In this tutorial, we will see how to use splinart with a circle.","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"First of all, we have to create a circle.","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"using Splinart\n\ncenter = [.5, .5]\nradius = .3\ntheta, path = circle(center, radius)","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"In the previous code, we create a discretization of a circle centered in 05 05 with a radius of 03. We don't specify the number of discretization points. The default is 30 points.","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"We can plot the points using matplotlib.","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"import Plots\n\nPlots.scatter(path[1, :], path[2, :], aspect_ratio = 1)","category":"page"},{"location":"circle/#The-sample","page":"Splinart on a circle","title":"The sample","text":"","category":"section"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"In order to compute a sample on a given cubic spline equation, we need to provide a Python function that gives us the x coordinates. We can choose for example.","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"using Random\n\nfunction x_func()\n    nsamples = 500\n    return mod2pi.(rand() .+ 2pi .* LinRange(0, 1, nsamples))\nend","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"We can see that the points are chosen between 0 2pi in a random fashion.","category":"page"},{"location":"circle/#The-cubic-spline","page":"Splinart on a circle","title":"The cubic spline","text":"","category":"section"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"Given a path, we can apply the spline function in order to compute the second derivative of this cubic spline.","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"yder2 = spline(theta, path)","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"And apply the equation to the sample","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"xsample = x_func()\nysample = zeros(2, length(xsample))\nsplint!(ysample, theta, path, yder2, xsample)","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"which gives","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"Plots.scatter(ysample[1, :], ysample[2, :], aspect_ratio=1)","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"We can see the sample is well defined around the circle that we defined previously.","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"Now, assume that we move randomly the points of the circle with a small distance.","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"update_path!(path, scale_value=.001, periodic=true)","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"Plots.scatter(path[1, :], path[2, :], aspect_ratio=1)","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"And we compute again the sample of the new cubic spline equation.","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"yder2 = spline(theta, path)\nsplint!(ysample, theta, path, yder2, xsample)","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"Plots.scatter(ysample[1, :], ysample[2, :], ms = 2, aspect_ratio=1)","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"update_path!(path, scale_value=.001, periodic=true)\nyder2 = spline(theta, path)\nsplint!(ysample, theta, path, yder2, xsample)\nPlots.scatter!(ysample[1, :], ysample[2, :], ms = 2, aspect_ratio=1)","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"The circle is deformed.","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"This is exactly how works splinart. We give a shape and at each step","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"we perturb the points of this shape\nwe compute a sample an this new cubic spline equation\nwe add the pixel with a given color on the output image","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"And we do that several time. We can have the following result","category":"page"},{"location":"circle/","page":"Splinart on a circle","title":"Splinart on a circle","text":"img_size = 1000\nimg = ones(Int, (img_size, img_size))\n\ntheta, path = circle([0.5, 0.5], 0.3)\n\nfunction xs_func()\n    nsamples = 500\n    return mod2pi.(rand() .+ (2π .* LinRange(0, 1, nsamples)))\nend\n\nupdate_img!(img, path, xs_func, theta, nrep=4000)\n\nPlots.heatmap(img, c = Plots.cgrad(:grays, rev=true), aspect_ratio=1, legend = false, showaxis = false)","category":"page"}]
}
